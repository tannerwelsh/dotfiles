"
" Vim configuration for Tanner Welsh
"
" Much inspiration taken from:
" - https://github.com/changemewtf/no_plugins/blob/master/no_plugins.vim
" - https://medium.com/actualize-network/how-to-learn-vim-a-four-week-plan-cd8b376a9b85

set nocompatible " not vi compatible

"-------------
" OS Detection
"-------------
if !exists('g:os')
  if has('win64') || has('win32') || has('win16')
    let g:os = 'Windows'
  else
    " Darwin (Mac) or Linux
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif

"--------------------
" Package/plugin mgmt
"--------------------
packloadall " load all packages in 'start' directory
packadd! dracula

" Add FZF to runtime path
if g:os == 'Darwin'
  set rtp+=/usr/local/opt/fzf
elseif g:os == 'Linux'
  set rtp+=/home/linuxbrew/.linuxbrew/opt/fzf
endif

"------------------
" Syntax and indent
"------------------
syntax on " turn on syntax highlighting

if !has('gui_running')
  set t_Co=256 " use true colors
endif

set showmatch " show matching braces when text indicator is over them

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

" filetype-specific configurations can be found in
" ~/.vim/ftplugin/<language>.vim
filetype plugin indent on " enable file type detection
set autoindent

"--------------
" Tabs & spaces
"--------------
" use 2 spaces instead of tabs during formatting
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2

set nojoinspaces " suppress inserting two spaces between sentences

"----------------------
" Find, search, replace
"----------------------
set incsearch " incremental search (as string is being typed)
set hls " highlight search
set wrapscan " wrap search to beginning of file

" smart case-sensitive search
set ignorecase
set smartcase

" consider dashes as part of a word object, not word separators
set iskeyword+=-

"----------------
" Built-in macros
"----------------
runtime macros/matchit.vim " enables using % to jump between HTML tags

"----------------
" Colors & themes
"----------------
set background=dark
colorscheme nord

" set lightline colorscheme
" options: https://github.com/itchyny/lightline.vim/blob/master/colorscheme.md
let g:lightline = { 'colorscheme': 'nord' }

"---------------------
" Basic editing config
"---------------------
set shortmess+=I " disable startup message
set nu " number lines
set listchars=tab:>>,nbsp:~ " set list to see tabs and non-breakable spaces
set lbr " line break
set scrolloff=5 " show lines above and below cursor (when possible)
set noshowmode " hide mode
set laststatus=2
set backspace=indent,eol,start " allow backspacing over everything
set timeout timeoutlen=1000 ttimeoutlen=100 " fix slow O inserts
set lazyredraw " skip redrawing screen in some cases
set hidden " allow auto-hiding of edited buffers
set history=8192 " more history
set nofoldenable " disable folding by default
set mouse+=a " enable mouse mode (scrolling, selection, etc)
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

"------------------------
" File finding / browsing
"------------------------
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

"----------------
" Auto completion
"----------------

" tab completion for files/buffers
set wildmode=longest,list
set wildmenu

" don't scan included files for ctrl-n completion menu
setglobal complete-=i

"------------
" Key mapping
"------------

let mapleader = "'" " map leader to single quote

" edit this file
nnoremap <Leader>ve :edit $MYVIMRC<cr>
" re-source vimrc
nnoremap <Leader>vr :source $MYVIMRC<cr>

" move between panes
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" yank (copy) / paste to/from system primary clipboard
if g:os == 'Darwin'
  " macOS only has one system clipboard
  nnoremap <Leader>y "*y
  vnoremap <Leader>y "*y
  nnoremap <Leader>p "*p
elseif g:os == 'Linux'
  " on Linux this uses the desktop clipboard (ctrl-c/x/v)
  nnoremap <Leader>y "+y
  vnoremap <Leader>y "+y
  nnoremap <Leader>p "+p
endif

" allow using . in visual mode to repeat command on each line
" thanks to Drew Neil's Practical Vim course/book
xnoremap . :normal .<CR>

" shortcut to apply macro across selected lines in visual mode
"   (prompts for macro id)
" thanks to Drew Neil's Practical Vim course/book
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

" copy visual selection into search command
" thanks to https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

"-----------------------
" Panes, windows, & tabs
"-----------------------

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" go to file in vsplit pane
nnoremap gv <C-W>vgf

" Re-map FZF's Rg function to use ctrl-a/d instead of alt-a/d (no alt on mac)
if g:os == 'Darwin'
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   "rg --column --line-number --no-heading --color=always --smart-case -- ".shellescape(<q-args>),
  \   1,
  \   {'options': fzf#vim#with_preview()["options"] + ['--bind', 'ctrl-a:select-all,ctrl-d:deselect-all']},
  \   <bang>0
  \ )
endif

" FZF shortcuts
nnoremap <Leader>f/ :Files<space>
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>gf :GFiles?<CR>
nnoremap <Leader>cc :Commits<CR>
nnoremap <Leader>bc :BCommits<CR>
nnoremap <Leader>w :Windows<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>l :Lines<CR>
nnoremap <Leader>bl :BLines<CR>
nnoremap <Leader>t/ :Tags<space>
nnoremap <Leader>tt :Tags<CR>
nnoremap <Leader>bt :BTags<CR>
nnoremap <Leader>r/ :Rg<space>
nnoremap <Leader>rr :Rg<CR>
nnoremap <Leader>rw yiw:Rg<space><C-R>"<CR>
vnoremap <Leader>rr y:Rg<space><C-R>0<CR>

" --------
" Commands
" --------

" Function to trim trailing whitespace, from:
" https://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

command! TrimWS call TrimWhitespace()

nnoremap <Leader>tw :TrimWS<CR>

" Quick trim + write file
" (<bar> stands in for the | char, used to chain commands)
nnoremap <Leader>ww :exe "silent! TrimWS" <bar> w<CR>


" ------------
" Text Objects
" ------------

" x-123-y
" call textobj#user#plugin('token-segments', {
" \   'kebab-case': {
" \     'pattern': ['-', '-'],
" \     'select': ['ad', 'id'],
" \   },
" ' })

" ERB Text Objext
" Credit to @whatyouhide
" https://github.com/whatyouhide/vim-textobj-erb

" Define some regexes.
let s:whitespace = '\(\s\|\n\)*'
let s:left_modifiers = '\(-\|=\{1,2}\|#\)\?'
let s:right_modifiers = '\-\?'

let s:left = '<%' . s:left_modifiers . s:whitespace
let s:right = s:whitespace . s:right_modifiers . '%>'

" Define the plugin.
call textobj#user#plugin('erb', {
\   '-': {
\     'pattern': [s:left, s:right],
\     'select-a': 'aE',
\     'select-i': 'iE'
\   },
\ })


"-------------
" Local config
"-------------

" Thanks to https://andrew.stwrt.ca/posts/project-specific-vimrc/
set exrc " allow per-project .vimrc files
set secure " disable unsafe commands in local .vimrc files

