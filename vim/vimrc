"
" Vim configuration for Tanner Welsh
"
" Much inspiration taken from:
" - https://github.com/changemewtf/no_plugins/blob/master/no_plugins.vim
" - https://medium.com/actualize-network/how-to-learn-vim-a-four-week-plan-cd8b376a9b85

set nocompatible " not vi compatible

"-------------
" OS Detection
"-------------
if !exists('g:os')
  if has('win64') || has('win32') || has('win16')
    let g:os = 'Windows'
  else
    " Darwin (Mac) or Linux
    let g:os = substitute(system('uname'), '\n', '', '')
  endif
endif

"--------------------
" Package/plugin mgmt
"--------------------
packadd! dracula

" Add FZF to runtime path
if g:os == 'Darwin'
  set rtp+=/usr/local/opt/fzf
elseif g:os == 'Linux'
  set rtp+=/home/linuxbrew/.linuxbrew/opt/fzf
endif

"------------------
" Syntax and indent
"------------------
syntax on " turn on syntax highlighting

if !has('gui_running')
  set t_Co=256 " use true colors
endif

set showmatch " show matching braces when text indicator is over them

" highlight current line, but only in active window
augroup CursorLineOnlyInActiveWindow
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
augroup END

filetype plugin indent on " enable file type detection
set autoindent

"--------------
" Tabs & spaces
"--------------
" use 2 spaces instead of tabs during formatting
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2

set nojoinspaces " suppress inserting two spaces between sentences

"----------------------
" Find, search, replace
"----------------------
set incsearch " incremental search (as string is being typed)
set hls " highlight search
set wrapscan " wrap search to beginning of file

" smart case-sensitive search
set ignorecase
set smartcase

"----------------
" Colors & themes
"----------------
set background=dark
colorscheme solarized8_flat

" set lightline colorscheme
" options: https://github.com/itchyny/lightline.vim/blob/master/colorscheme.md
let g:lightline = { 'colorscheme': 'solarized dark' }

"---------------------
" Basic editing config
"---------------------
set shortmess+=I " disable startup message
set nu " number lines
set listchars=tab:>>,nbsp:~ " set list to see tabs and non-breakable spaces
set lbr " line break
set scrolloff=5 " show lines above and below cursor (when possible)
set noshowmode " hide mode
set laststatus=2
set backspace=indent,eol,start " allow backspacing over everything
set timeout timeoutlen=1000 ttimeoutlen=100 " fix slow O inserts
set lazyredraw " skip redrawing screen in some cases
set hidden " allow auto-hiding of edited buffers
set history=8192 " more history
set nofoldenable " disable folding by default
set mouse+=a " enable mouse mode (scrolling, selection, etc)
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

"------------------------
" File finding / browsing
"------------------------
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

"----------------
" Tab completions
"----------------
" tab completion for files/buffers
set wildmode=longest,list
set wildmenu

"------------
" Key mapping
"------------

" edit this file
nnoremap <Leader>ve :edit $MYVIMRC<cr>
" re-source vimrc
nnoremap <Leader>vr :source $MYVIMRC<cr>

" move between panes
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" yank (copy) / paste to/from system primary clipboard
nnoremap <Leader>y "*y
vnoremap <Leader>y "*y
nnoremap <Leader>p "*p

"-----------------------
" Panes, windows, & tabs
"-----------------------

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Switch between tabs with FZF using <leader>t
" http://ericnode.info/post/fzf_jump_to_tab_in_vim/
function TabName(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return fnamemodify(bufname(buflist[winnr - 1]), ':t')
endfunction

function! s:jumpToTab(line)
  let pair = split(a:line, ' ')
  let cmd = pair[0].'gt'
  execute 'normal' cmd
endfunction

nnoremap <silent> <Leader>t :call fzf#run({
\   'source':  reverse(map(range(1, tabpagenr('$')), 'v:val." "." ".TabName(v:val)')),
\   'sink':    function('<sid>jumpToTab'),
\   'down':    tabpagenr('$') + 2
\ })<CR>

" --------
" Commands
" --------

" Function to trim trailing whitespace, from:
" https://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file
fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

command! TrimWS call TrimWhitespace()
