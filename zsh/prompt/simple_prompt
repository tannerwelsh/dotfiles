#!/usr/bin/env zsh

##
# ZSH Prompt: Simple
#
# Inspiration taken from Purification by Matthieu Cneude
# https://github.com/Phantas0s/purification

# Some useful symbols to know:
# %F => color dict (can use these values: black, red, green, yellow, blue, magenta, cyan, white, default)
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

git_prompt_status() {
  local INDEX STATUS

  INDEX=$(command git status --porcelain -b 2> /dev/null)
  STATUS=""

  while IFS= read -r line; do
    case "$line" in
      '?? '*)
        [[ "$STATUS" != *"$GIT_PROMPT_UNTRACKED"* ]] && STATUS="$GIT_PROMPT_UNTRACKED$STATUS"
        ;;
      'A '*|'M '*|'MM '*)
        [[ "$STATUS" != *"$GIT_PROMPT_ADDED"* ]] && STATUS="$GIT_PROMPT_ADDED$STATUS"
        ;;
      ' M '*|'AM '*|' T '*)
        [[ "$STATUS" != *"$GIT_PROMPT_MODIFIED"* ]] && STATUS="$GIT_PROMPT_MODIFIED$STATUS"
        ;;
      'R '*)
        [[ "$STATUS" != *"$GIT_PROMPT_RENAMED"* ]] && STATUS="$GIT_PROMPT_RENAMED$STATUS"
        ;;
      ' D '*|'D '*|'AD '*)
        [[ "$STATUS" != *"$GIT_PROMPT_DELETED"* ]] && STATUS="$GIT_PROMPT_DELETED$STATUS"
        ;;
      'UU '*)
        [[ "$STATUS" != *"$GIT_PROMPT_UNMERGED"* ]] && STATUS="$GIT_PROMPT_UNMERGED$STATUS"
        ;;
      '##'*)
        if [[ "$line" == *"ahead"* ]] && [[ "$STATUS" != *"$GIT_PROMPT_AHEAD"* ]]; then
          STATUS="$GIT_PROMPT_AHEAD$STATUS"
        fi
        if [[ "$line" == *"behind"* ]] && [[ "$STATUS" != *"$GIT_PROMPT_BEHIND"* ]]; then
          STATUS="$GIT_PROMPT_BEHIND$STATUS"
        fi
        if [[ "$line" == *"diverged"* ]] && [[ "$STATUS" != *"$GIT_PROMPT_DIVERGED"* ]]; then
          STATUS="$GIT_PROMPT_DIVERGED$STATUS"
        fi
        ;;
    esac
  done <<< "$INDEX"

  if command git rev-parse --verify refs/stash >/dev/null 2>&1; then
    [[ "$STATUS" != *"$GIT_PROMPT_STASHED"* ]] && STATUS="$GIT_PROMPT_STASHED$STATUS"
  fi

  if [[ -z "$STATUS" ]]; then
    STATUS="$GIT_PROMPT_NO_CHANGE"
  fi

  if [[ -n "$STATUS" ]]; then
    echo "$STATUS"
  fi
}

prompt_git_branch() {
    autoload -Uz vcs_info
    precmd_vcs_info() { vcs_info }
    precmd_functions+=( precmd_vcs_info )
    setopt prompt_subst
    zstyle ':vcs_info:git:*' formats '%b'
}

prompt_git_info() {
    [ ! -z "$vcs_info_msg_0_" ] && echo "$GIT_PROMPT_PREFIX%F{${PROMPT_BRANCH_COLOR}}$vcs_info_msg_0_%f$GIT_PROMPT_SUFFIX"
}

prompt_precommand() {
    # Pass a line before each prompt
    print -P ''
}

# Detect if we're in light or dark mode
prompt_detect_theme() {
    # Check if we're in a terminal that supports theme detection
    local theme_mode="dark"  # default to dark

    # Try to detect from various sources
    if [[ -n "$COLORFGBG" ]]; then
        # Some terminals set this variable (format: "fg;bg")
        local bg_color="${COLORFGBG##*;}"
        if [[ "$bg_color" =~ ^[0-7]$ ]]; then
            theme_mode="dark"
        elif [[ "$bg_color" =~ ^[8-15]$ ]]; then
            theme_mode="light"
        fi
    fi

    # Check for explicit theme environment variables
    if [[ "$THEME_MODE" == "light" ]] || [[ "$VIM_THEME" == "light" ]]; then
        theme_mode="light"
    elif [[ "$THEME_MODE" == "dark" ]] || [[ "$VIM_THEME" == "dark" ]]; then
        theme_mode="dark"
    fi

    echo "$theme_mode"
}

# Set colors based on theme
prompt_set_colors() {
    local theme=$(prompt_detect_theme)

    if [[ "$theme" == "light" ]]; then
        # Light theme colors (better contrast on light backgrounds)
        PROMPT_PATH_COLOR="4"        # dark blue for path
        PROMPT_SYMBOL_COLOR="5"      # dark magenta for lambda
        PROMPT_BRANCH_COLOR="8"      # dark gray for git branch
        PROMPT_TIME_COLOR="8"        # dark gray for time
        PROMPT_CLEAN_COLOR="8"       # dark gray for clean status
        
        # Git status colors for light mode
        GIT_COLOR_ADDED="2"          # dark green
        GIT_COLOR_MODIFIED="3"       # dark yellow/brown
        GIT_COLOR_DELETED="1"        # dark red
        GIT_COLOR_RENAMED="4"        # dark blue
        GIT_COLOR_UNMERGED="6"       # dark cyan
        GIT_COLOR_UNTRACKED="6"      # dark cyan
        GIT_COLOR_STASHED="1"        # dark red
        GIT_COLOR_BEHIND="1"         # dark red
        GIT_COLOR_AHEAD="2"          # dark green
    else
        # Dark theme colors (better contrast on dark backgrounds)
        PROMPT_PATH_COLOR="12"       # bright blue for path
        PROMPT_SYMBOL_COLOR="13"     # bright magenta for lambda
        PROMPT_BRANCH_COLOR="8"      # bright black/gray for git branch
        PROMPT_TIME_COLOR="8"        # bright black/gray for time
        PROMPT_CLEAN_COLOR="8"       # bright black/gray for clean status
        
        # Git status colors for dark mode
        GIT_COLOR_ADDED="green"      # bright green
        GIT_COLOR_MODIFIED="yellow"  # bright yellow
        GIT_COLOR_DELETED="red"      # bright red
        GIT_COLOR_RENAMED="blue"     # bright blue
        GIT_COLOR_UNMERGED="cyan"    # bright cyan
        GIT_COLOR_UNTRACKED="cyan"   # bright cyan
        GIT_COLOR_STASHED="red"      # bright red
        GIT_COLOR_BEHIND="red"       # bright red
        GIT_COLOR_AHEAD="green"      # bright green
    fi
}

simple_prompt() {
    autoload -Uz add-zsh-hook
    add-zsh-hook precmd prompt_precommand

    # Set colors based on theme
    prompt_set_colors

    SYMBOL_PROMPT="Î»"

    SYMBOL_GIT_BRANCH="" # Other options: âŽ‡ ðŸŒ¿Î»
    SYMBOL_GIT_ADDED="+"
    SYMBOL_GIT_MODIFIED="Â±"
    SYMBOL_GIT_DELETED="-"
    SYMBOL_GIT_RENAMED="âžœ"
    SYMBOL_GIT_UNMERGED="Î”"
    SYMBOL_GIT_UNTRACKED="Â¬"
    SYMBOL_GIT_STASHED="âˆ—"
    SYMBOL_GIT_NOCHANGE="âˆ…"

    GIT_PROMPT_PREFIX="%F{${PROMPT_BRANCH_COLOR}}$SYMBOL_GIT_BRANCH%f"
    GIT_PROMPT_SUFFIX=""
    GIT_PROMPT_DIRTY=""
    GIT_PROMPT_CLEAN=""

    GIT_PROMPT_ADDED="%F{${GIT_COLOR_ADDED}}$SYMBOL_GIT_ADDED%f "
    GIT_PROMPT_MODIFIED="%F{${GIT_COLOR_MODIFIED}}$SYMBOL_GIT_MODIFIED%f "
    GIT_PROMPT_DELETED="%F{${GIT_COLOR_DELETED}}$SYMBOL_GIT_DELETED%f "
    GIT_PROMPT_RENAMED="%F{${GIT_COLOR_RENAMED}}$SYMBOL_GIT_RENAMED%f "
    GIT_PROMPT_UNMERGED="%F{${GIT_COLOR_UNMERGED}}$SYMBOL_GIT_UNMERGED%f "
    GIT_PROMPT_UNTRACKED="%F{${GIT_COLOR_UNTRACKED}}$SYMBOL_GIT_UNTRACKED%f "
    GIT_PROMPT_STASHED="%B%F{${GIT_COLOR_STASHED}}$SYMBOL_GIT_STASHED%f%b "
    GIT_PROMPT_BEHIND="%B%F{${GIT_COLOR_BEHIND}}%f%b "
    GIT_PROMPT_AHEAD="%B%F{${GIT_COLOR_AHEAD}}%f%b "
    GIT_PROMPT_NO_CHANGE="%F{${PROMPT_CLEAN_COLOR}}$SYMBOL_GIT_NOCHANGE%f "

    JOBS_COUNT="%(1j.[%j].)"

    prompt_git_branch
    RPROMPT='%F{${PROMPT_TIME_COLOR}}$JOBS_COUNT (%*)%f'
    PROMPT=$'%F{${PROMPT_PATH_COLOR}}%~ on $(prompt_git_info) $(git_prompt_status)
%B%F{${PROMPT_SYMBOL_COLOR}}$SYMBOL_PROMPT%f%b '
}

simple_prompt
